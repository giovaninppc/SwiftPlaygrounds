//: [Previous](@previous)
//: # Estruturas B√°sicas
//:
//: ## Fun√ß√µes
import Foundation
/*:
 Ahhh fun√ß√µes... üòé
 
 ahhh...
 
 a.....
 
 (s√©rio gente to pensando em como explicar isso).
 
 Vamos l√° - fun√ß√µes s√£o trechos de c√≥digo que voc√™ escreve, e pode chamar pra ser executado em outro lugar - sem ter que reescrever esse c√≥digo.
 
 Pra quem gosta de coisas baixo n√≠vel - s√£o rotinas e subrotinas, controladas por saltos e desvios de execu√ß√£o.
 
 */
// Essa fun√ß√£o, quando invocada, vai apenas printar Hello World
func myFunc(){
    print("Hello World")
}

myFunc()

var testeFunc = myFunc
testeFunc()
/*:
 Uma loucura, √© que em Swift, fun√ß√µes S√ÉO tipos - elas s√£o consideradas "cidad√£os de primeira classe" - podem ser atribu√≠das para viri√°veis, ou usadas como par√¢metro
 
 - > N√£o sei se lembram nessa altura do campeonato mas Swift √© multiparadigma, e fun√ß√µes fortemente tipadas como cidad√£os de primeira classe s√£o umas das bases da programa√ß√£o funcional ü§Ø.
 */
// Essa fun√ß√£o, quando invocada, vai retornar o valor 3
func myReturnFunc() -> Int{
    return 3
}

let teste2: ()->Int = myReturnFunc
/*:
 A fun√ß√£o acima √© do tipo **()->Int** ou seja, ela retorna um valor do tipo Int ao final da sua execu√ß√£o
 */
// Essa fun√ß√£o recebe um valor Int como par√¢metro e retorna um Int
func twice(_ numero: Int) -> Int{
    return numero*2
}

twice(5)
/*:
 A fun√ß√£o acima √© do tipo **(Int)->Int** ou seja, ela retorna um valor do tipo Int ao final da sua execu√ß√£o e recebe um valor do tipo Int como par√¢metro
 */
/*:
 E para ser executada, uma fun√ß√£o, basta cham√°-la pelo nome:
 */
myFunc()
let x = myReturnFunc()
let y = twice(x)
/*:
 O formato de uma fun√ß√£o pode ent√£o ser definido como:
 
 **func** <nome da funcao>([<label do parametro><label interna do parametro>:<tipo do parametro>]) -> <tipo de retorno>
 
 O retorno **void** pode ser omitido.
 
 Um par√¢metro tem que ser tipado, e ele pode ter 2 nomes - um externo (quando chamada a fun√ß√£o, esse nome tem que ser explicitado) e um interno (para ser usado dentro da fun√ß√£o).
 
 Se houver um label s√≥ - ele serve para tanto interno quanto externo.
 
 O label externo pode ser omitido usando _
 */
// Uma fun√ß√£o de multiplica√ß√£o
func multiply(_ number: Int, by multiplier: Int) -> Int{
    return number * multiplier
}
multiply(5, by: 2)
//Atribuir uma fun√ß√£o a uma vari√°vel, faz com que os labels sejam perdidos
let M = multiply
//Usar a fun√ß√£o guardada
M(4,6)



//#-hidden-code
import PlaygroundSupport
let view = SimpleViewController()
view.addLabel(text: "Hello World\nx = 3\ny = 2*3\nmultiply(5, by: 2) == 5*2 == 10\nM(4,6) == 4*6 == 24")
PlaygroundPage.current.liveView = view
//#-end-hidden-code

//: [Next](@next)
