//: [Previous](@previous)
import UIKit
import PlaygroundSupport
/*:
 ## Matem√°gica üßôüèΩ‚Äç‚ôÄÔ∏è

 J√° vimos que `UIViews` s√£o definidas por propriedades num√©ricas:

 - x
 - y
 - width
 - height
 - backgroundColor
 - roationAngle
 - ...

 Vamos dar uma pausa nas views, e um bizu na matem√°tica:

 ### Interpola√ß√µes

 Imagine que temos 2 pontos num gr√°fico

 ![](base-graph.png)

 Uma interpola√ß√£o √© escrever uma fun√ß√£o que una esses 2 (ou n) pontos de alguma forma.

 ![](line-interpolation.png)

 E essa interpola√ß√£o pode ser feita por qualquer fun√ß√£o (polin√¥mio, log, exponencial...)

 ![](multiple-interpolation.png)

 _Por que isso √© importante para a gente?_

 Porque conseguimos definir um comportamento cont√≠nuo usando apenas um estado inicial e um final!

 _O qu√™?_

 Calm√¥. Vou explicar

 Imagine que temos uma view, na posi√ß√£o (0,0), e queremos mov√™-la at√© a posi√ß√£o (300,300) a uma velocidade (v).
 O que voc√™ poderia fazer √© calcular qual seria a posi√ß√£o de cada pixel a cada frame de atualiza√ß√£o da tela, e atualizar a posi√ß√£o da sua view _frame-a-frame_.

 O que seria P√âSSIMO de se fazer, por isso os frameworks de anima√ß√£o usam de interpola√ß√µes para resolver esse c√°lculo pra gente! Ent√£o precisamos apenas dos estados iniciais e finais para animar alguma coisa!

 ![](animation.png)

 Como uma interpola√ß√£o nos d√° uma fun√ß√£o _f(x) = y_, ou nesse caso _f(t) = (x,y)_ podemos calcular o valor de qualquer ponto no tempo dentro da anima√ß√£o que queremos.

 E o `UIKit` j√° nos prov√™ com um framework de anima√ß√£o baseado exatamente nisso.
 */
let screen = UIView(frame: .init(x: 0, y: 0, width: 500, height: 800))

let redSquare = UIView(frame: .init(x: 0, y: 0, width: 50, height: 50))
redSquare.backgroundColor = .red

screen.addSubview(redSquare)

// *** ANIMA√á√ÉO ***
UIView.animate(withDuration: 3.0) {
    redSquare.center = .init(x: 300, y: 300)
}

PlaygroundPage.current.liveView = screen

//: [Next](@next)
